---
title: Processors
jupyter: python3
---

> The various `Processor` classes available to use


## Processors for Notebooks
<div style="background:#f7f7f7; border:2px solid #5a5a5a; border-top-width:2px; border-left-width: 2px; border-top-left-radius: 0.75rem; margin-top: 2rem; margin-bottom: 1.5rem; padding-left: 1rem; padding-right: .5rem;">

### `class BasicProcessor` {#nbquarto.processors.example.BasicProcessor}
[\<source\>](https://github.com/muellerzr/nbquarto/blob/main/src/nbquarto/processors/example.py#L17){style="float:right;font-size:.875rem;"}
<p style="font-size:.875rem;line-height:1.25rem;">
(**`notebook`**`: AttributeDictionary`)
</p>

<div style="font-size:.875rem;line-height:1.25rem;margin-bottom:1.25em; margin-top:1.25em; padding_bottom:0;">

A basic processor that adds a comment to the top of a cell

Example usage:

```python
#| process
def my_function():
    return "Hello world!"
```

</div>
</div>

Example outcome:

```python
# This code has been processed!
def my_function():
    return "Hello world!"
```
<div style="background:#f7f7f7; border:2px solid #5a5a5a; border-top-width:2px; border-left-width: 2px; border-top-left-radius: 0.75rem; margin-top: 2rem; margin-bottom: 1.5rem; padding-left: 1rem; padding-right: .5rem;">

### `class AutoDocProcessor` {#nbquarto.processors.AutoDocProcessor}
[\<source\>](https://github.com/muellerzr/nbquarto/blob/main/src/nbquarto/processors/autodoc.py#L250){style="float:right;font-size:.875rem;"}
<p style="font-size:.875rem;line-height:1.25rem;">
(**`notebook`**, **`processor_args`**`: dict = {}`)
</p>

<div style="font-size:.875rem;line-height:1.25rem;margin-bottom:1.25em; margin-top:1.25em; padding_bottom:0;">

A processor which will automatically generate API documentation for a given class or method.
Largely relies on the implementation in [hf-doc-builder](https://github.com/huggingface/doc-builder),
while adding some customizations for Quarto.

This processor expects the following directives:

- `autodoc`, (`str`):
  Should contain the exact import location (or relative) of an object or function to document,
  such as `nbquarto.processors.AutoDocProcessor`.
- `methods`, (`List[str]`, *optional*):
  A list of methods to expose for the specified class. If nothing is passed, all public methods
  will be documented. If special methods should be documented including all special methods, such
  as `__call__`, the key `all` can be passed along with the special methods to document.

Examples:

To expose all public methods:
```markdown
#| autodoc: nbquarto.processors.AutoDocProcessor
```

To specify specific functions to document along with the init:
```markdown
#| autodoc nbquarto.processors.AutoDocProcessor
#| methods process
```

To expose all public methods and include special or hidden methods:
```markdown
#| autodoc nbquarto.processors.AutoDocProcessor
#| methods all, __call__
```

</div>
</div>

Example outcome:

(See the auto-generated docs that made this!)
<div style="background:#f7f7f7; border:2px solid #5a5a5a; border-top-width:2px; border-left-width: 2px; border-top-left-radius: 0.75rem; margin-top: 2rem; margin-bottom: 1.5rem; padding-left: 1rem; padding-right: .5rem;">

### `class CodeNoteProcessor` {#nbquarto.processors.CodeNoteProcessor}
[\<source\>](https://github.com/muellerzr/nbquarto/blob/main/src/nbquarto/processors/codenotes.py#L124){style="float:right;font-size:.875rem;"}
<p style="font-size:.875rem;line-height:1.25rem;">
(**`notebook`**`: AttributeDictionary`)
</p>

<div style="font-size:.875rem;line-height:1.25rem;margin-bottom:1.25em; margin-top:1.25em; padding_bottom:0;">

A processor which checks and reorganizes cells for documentation with the proper
explanations

Specifically will look at source code cells that have markdown cells following them.
Each markdown cell should contain `#| explain` followed by a selection of the source
code the markdown cell is explaining. The processor will then create a panel tabset
with the original code and the new explanation.

For example:

In a code cell:
```python
def addition(a,b):
    return a+b
```

In a subsequent markdown cell:
```markdown
#| explain `addition(a,b)`
This function adds two numbers together
```

</div>
</div>

Example outcome:

::: {.panel-tabset}
## Code
```python
def addition(a,b):
  return a+b
```
## Code & Explanation
```python
def addition(a,b):
  return a+b
```
***
```{.python}
addition(a,b)
```
::::{style='padding-top: 0px;'}
This function adds two numbers together
::::
:::

## Post Processors

Post processors get applied after all regular processors get applied, and are performed on the output `.qmd` files across the entire *project*.
<div style="background:#f7f7f7; border:2px solid #5a5a5a; border-top-width:2px; border-left-width: 2px; border-top-left-radius: 0.75rem; margin-top: 2rem; margin-bottom: 1.5rem; padding-left: 1rem; padding-right: .5rem;">

### `class SemanticVersioningProcessor` {#nbquarto.processors.SemanticVersioningProcessor}
[\<source\>](https://github.com/muellerzr/nbquarto/blob/main/src/nbquarto/processors/semantic_versioning.py#L65){style="float:right;font-size:.875rem;"}
<p style="font-size:.875rem;line-height:1.25rem;">
(**`content`**`: str`)
</p>

<div style="font-size:.875rem;line-height:1.25rem;margin-bottom:1.25em; margin-top:1.25em; padding_bottom:0;">

A processor which will inject javascript into the top of the `qmd`
to enable semantic versioning of the documentation by hiding parts
of the sidebar.

Assumes your documentation structure is as follows:

```
- docs/
  - version_1
    - page_1.qmd
    - page_2.qmd
  - version_2
    - page_1.qmd
    - page_2.qmd
```

From here, the sidebar will be populated based on the
current opened page and its semantic version. So if
you are on `/docs/version_1/page_1`, the sidebar will
hide all of `version_2`'s pages (and any others there may be),
and only show `version_1`.

</div>
</div>

This processor also requires that your project is configured in a particular way. To read more be sure to check out the usage guide. **TO BE COMPLETED**