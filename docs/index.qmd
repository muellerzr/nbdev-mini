---
title: "nbquarto"
---

# What is `nbquarto`?

`nbquarto` is a python interface to quickly interact with, modify, and overall process the cells in a Jupyter Notebook, generally to be utilized in [Quarto](https://quarto.org) projects. (However that is *not* a requirement at all!)

But why would you want to modify a Jupyter Notebook *outside Jupyter*? Well there are a few reasons:

- To quickly inject boilerplate in a cell's contents before doing further processing
- To apply some formatting based upon a directive in the cell before generating the documentation
- To create a new processor that wraps around something complex before generating documentation, such as automatically generating API documentation quickly.

You'll find a trend here:

Generally `nbquarto` is built on the idea of an extensible *documentation processing framework* that can be utilized to quickly create and apply post-processors 
to Jupyter Notebooks when generating documentation saving you time, effort, or potentially providing access to utilities that don't exist outside-the-box in Quarto.

As a result, while it's designed mostly around Quarto, it simply uses their directives for most of it. As a result this framework can be used in *any* documentation framework
by the end of it, if the documentation were originating from Jupyter Notebooks.

## Why `nbquarto`?

`nbquarto` takes all of its inspiration from the [nbdev](https://github.com/fastai/nbdev) project by fast.ai, and reimplements the core part of it, the `Processor`, in a way that entices code readability, better error management, and an easier user experience overall. 

I've tried to write projects like `nbquarto` multiple times, most recently through the [nbdev-extensions](https://github.com/muellerzr/nbdev-extensions), however for my general use-case of someone who just wanted to modify the notebooks with specific markup for whatever processor I wanted to include (such as an automatic API-documentation generator), having the entire framework `nbdev` advertised was just far too much for what I wanted to do, along with the dangers of using a library that is exceedingly cryptic and with hard-to-read source code due to so much abstraction.

`nbquarto` removes *almost all* of the abstraction, and its dependencies are exceedingly minimal, allowing for anyone who wants to pick up this project to easily understand just what is happening under the hood and do what they want.

## What's the difference between this project and [Quarto Extensions?](https://quarto.org/docs/extensions/)

True, quarto extensions are *already* a thing, but I didn't enjoy the fact I had to go learn an entirely new language (Lua) to modify content that was already (in this case) in Python. As a result, `nbquarto` acts as a pythonic-version of Lua in its processing capabilities. While we sacrifice some processing speed (because it *is* still python), the benefit of a flexible and easy-to-follow paradigm for creating these extensions far outweights the extra minimal seconds added to process each notebook.

## Important terms:

- `cell`: A singular module or item in a Jupyter Notebook, of which can either execute code written in it or contain Markdown that will be presented to a reader or on a Quarto website
- `directive`: A comment block in a notebook cell that Quarto (and `nbquarto`) can process or recognize. Generally denoted with a pipe (`|`) after the comment, such as `#| directive` or `# | directive`
- `Processor`: A class which modifies a cell in a Jupyter Notebook depending on the directive(s) present in it.


## How does it work?

The general idea of `nbquarto` revolves around a `Processor`. The original design intention was to inject Quarto-specific nuonces into the cell to help with code formatting, or to write quick shortcuts to create complex combinations in quarto syntax on the fly.

The following is a small snippet (taken from the [official example processor](src/nbquarto/processors/example.py)) which simply injects the code:

```python
# This code has been processed!
```
to the top of any cell.

```python
from nbquarto import Processor

class BasicProcessor(Processor):
    """
    A basic processor that adds a comment to the top of a cell
    """

    directives = "process"

    def process(self, cell):
        if any(directive in cell.directives_ for directive in self.directives):
            cell.source = f"# This code has been processed!\n{cell.source}"
```

The `process` function is what will get applied to the notebook cell, after checking if any directives to look for exist in the cell. 

`cell` objects contain two important aspects of information we can look at:
- `directives_`: `list[str]`, a list of directives in the cell, such as `process` if it were written as `#| process`
- `source`: The text that exists inside the cell that you might want to modify

By utilizing these two simplistic properties, one can create amazing extensions such as ones to [automatically generate API documentation](package_reference/processors.qmd#autodocprocessor) or [create helpful side-by-side code explanations](package_reference/processors.qmd#codenoteprocessor)

## Creating a config file

`nbquarto` utilizes a configuration file to handle all of the nuonces related to the processors to use, where the notebooks should be sent to, and can even handle setting any constants for `Processors` that they may want.

For example, located [here](tests/test_artifacts/single_processor.yaml) in the repo:

```yaml
documentation_source: tests
processors: [
    nbquarto.processors.example:BasicProcessor,
    nbquarto.processors.autodoc:AutoDocProcessor
]

processor_args:
  AutoDocProcessor: 
      repo_owner: muellerzr
      repo_name: nbquarto
```
This reads as follows:

- `output_folder`: All notebooks will be saved to a (potentially new) `processed_notebooks` directory

- `processors`: This contains the list of processors we want to apply
  
  - `nbquarto.processors.example:BasicProcessor` and `nbquarto.processors.autodoc:AutoDocProcessor`: This is the exact import for the processor to apply. Can also be relative if the package is setup for it (so it could be `nbquarto.processors:AutoDocProcessor`)
- `processor_args`: This contains a list of `processor`: `args` that should be passed all the time to a particular processor, if it takes in special configuration arguments
  - `AutoDocProcessor`: This is the name of the processor that will take in arguments following it
    - `repo_name` and `repo_owner`: These are arguments the `AutoDocProcessor` accepets upon its `__init__`.

## Actually processing your Notebooks

By calling the `nbquarto-process` command you can process notebooks with your configured `Processor`(s):

```bash
nbquarto-process --config_file tests/test_artifacts/single_processor.yaml --notebook_file tests/test_artifacts/test_example.ipynb --output_folder docs/
```

Afterwards, all of the processed notebooks are saved as `qmd` files in `output_folder` and can be modified directly, if you so choose. As you can specify already existing folders, you can have `docs` contain all of your regular documentation, and then expect that `nbquarto` will create the `qmd` files in the same directory structure it was in before except now in `docs`.