[
  {
    "objectID": "package_reference/notebook.html",
    "href": "package_reference/notebook.html",
    "title": "Notebook Utilities",
    "section": "",
    "text": "Functions to help with processing of notebooks. Most come from nbdev\n\n\nclass NotebookCell\n&lt;source&gt;\n\n(index: int, cell: dict)\n\n\nA cell for a Jupyter Notebook\n\n\nset_source\n&lt;source&gt;\n\n(source: list)\n\n\nParameters:\n\nsource (list) – The source of the cell as a list of strings\n\nSets the source attribute of the cell as a string and removes parsed directives\n\n\n\n\nnbquarto.notebook.dict2notebook\n&lt;source&gt;\n\n(d: dict = None, **kwargs)\n\n\nParameters:\n\nd (dict, optional, defaults to None) – A dictionary to convert\n\nConverts dictionary d to an AttributeDictionary\n\n\n\nnbquarto.notebook.read_notebook\n&lt;source&gt;\n\n(path: str)\n\n\nParameters:\n\npath (str) – The path to the Jupyter Notebook\n\nReads a Jupyter Notebook from a filepath\n\n\n\nnbquarto.notebook.write_notebook\n&lt;source&gt;\n\n(notebook: AttributeDictionary, path: str)\n\n\nParameters:\n\nnotebook (AttributeDictionary) – An object representing all the cells in a Jupyter Notebook\npath (str) – The path to the Jupyter Notebook\n\nWrites the contents of notebook to path\n\n\n\nnbquarto.notebook.new_notebook\n&lt;source&gt;\n\n(cells: list = [], metadata: dict = {}, nbformat: int = 4, nbformat_minor: int = 5)\n\n\nParameters:\n\ncells (list of NotebookCell, optional, defaults to []) – A list of cells to make up the notebook\nmetadata (dict, optional, defaults to {}) – Metadata for the notebook\nnbformat (int, optional, defaults to 4) – The nbformat of the notebook\nnbformat_minor (int, optional, defaults to 5) – The minor nbformat version of the notebook\n\nCreates a new empty notebook\n\n\n\nnbquarto.notebook.make_cell\n&lt;source&gt;\n\n(text: str, cell_type: str = 'code', **kwargs)\n\n\nParameters:\n\ntext (str) – The source code for the cell\ncell_type (str, optional, defaults to “code”) – The type of cell to make, must be one of “code”, “markdown”, or “raw” kwargs – Additional arguments to pass to the cell, such as metadata\n\nMakes a blank notebook cell"
  },
  {
    "objectID": "package_reference/processors.html",
    "href": "package_reference/processors.html",
    "title": "Processors",
    "section": "",
    "text": "The various Processor classes available to use\n\n\nclass BasicProcessor\n&lt;source&gt;\n\n(notebook: AttributeDictionary)\n\n\nA basic processor that adds a comment to the top of a cell\nExample usage:\n#| process\ndef my_function(): \n    return \"Hello world!\"\n\n\nExample outcome:\n# This code has been processed!\ndef my_function():\n    return \"Hello world!\"\n\nclass AutoDocProcessor\n&lt;source&gt;\n\n(notebook, processor_args: dict = {})\n\n\nA processor which will automatically generate API documentation for a given class or method. Largely relies on the implementation in hf-doc-builder, while adding some customizations for Quarto.\nThis processor expects the following directives:\n\nautodoc, (str): Should contain the exact import location (or relative) of an object or function to document, such as nbquarto.processors.AutoDocProcessor.\nmethods, (List[str], optional): A list of methods to expose for the specified class. If nothing is passed, all public methods will be documented. If special methods should be documented including all special methods, such as __call__, the key all can be passed along with the special methods to document.\n\nExamples:\nTo expose all public methods:\n#| autodoc: nbquarto.processors.AutoDocProcessor\nTo specify specific functions to document along with the init:\n#| autodoc nbquarto.processors.AutoDocProcessor\n#| methods process\nTo expose all public methods and include special or hidden methods:\n#| autodoc nbquarto.processors.AutoDocProcessor\n#| methods all, __call__\n\n\nExample outcome:\n(See the auto-generated docs that made this!)\n\nclass CodeNoteProcessor\n&lt;source&gt;\n\n(notebook: AttributeDictionary)\n\n\nA processor which checks and reorganizes cells for documentation with the proper explanations\nSpecifically will look at source code cells that have markdown cells following them. Each markdown cell should contain #| explain followed by a selection of the source code the markdown cell is explaining. The processor will then create a panel tabset with the original code and the new explanation.\nFor example:\nIn a code cell:\ndef addition(a,b):\n    return a+b\nIn a subsequent markdown cell:\n#| explain `addition(a,b)`\nThis function adds two numbers together\n\n\nExample outcome:\n\nCodeCode & Explanation\n\n\ndef addition(a,b):\n  return a+b\n\n\ndef addition(a,b):\n  return a+b\n\naddition(a,b)\n\nThis function adds two numbers together"
  },
  {
    "objectID": "package_reference/processor.html",
    "href": "package_reference/processor.html",
    "title": "The Processor",
    "section": "",
    "text": "The base class for all notebook processors\n\n\nclass Processor\n&lt;source&gt;\n\n(notebook: AttributeDictionary)\n\n\nBase class for all notebook processors. Any processors should inherit this class.\nWhen writing a processor, you can override methods that modify the content of a cell with the process_cell function.\nThe class stores the entire notebook in the notebook attribute.\nWhen using a processor, simply call the class and pass in a single cell.\nExample:\nclass BasicProcessor(Processor):\n    \"A basic processor that adds a comment to the top of a cell\"\n    directive = \"process\"\n\n    def process(self, cell):\n        cell.source = f\"# This code has been processed!\\n{cell.source}\"\n\n\nhas_directives\n&lt;source&gt;\n\n(cell: AttributeDictionary)\n\n\nChecks if cell contains any directives in self.directives\n\n\n\nprocess\n&lt;source&gt;\n\n(cell: AttributeDictionary)\n\n\nParameters:\n\ncell (AttributeDictionary) – A cell from a Jupyter Notebook\n\nA function to apply on a cell. Should use self.has_directives to see if the processor should be applied\nExample:\ndef process(self, cell):\n    if self.has_directives(self, cell):\n        cell.source = \"Found a directive!\"\n\n\n\nprocess_cell\n&lt;source&gt;\n\n(cell: AttributeDictionary)\n\n\nParameters:\n\ncell (AttributeDictionary) – A cell from a Jupyter Notebook\n\nApplies the processor to a cell if the cell is of the correct type and contains the correct directive\n\n\n\n\nclass NotebookProcessor\n&lt;source&gt;\n\n(path: str = None, processors: list = [], notebook: AttributeDictionary = None, config: dict = {}, debug: bool = False, remove_directives: bool = True, process_immediately: bool = False)\n\n\nParameters:\n\npath (str, optional, defaults to None) – The path to the notebook\nprocessors (list, optional, defaults to []) – A list of functions to apply to the notebook\nnotebook (AttributeDictionary, optional, defaults to None) – An object representing all the cells in a Jupyter Notebook. If None, will be loaded from path\nprocessor_args (dict, optional, defaults to {}) – A dictionary of arguments to pass to a given processor. Should be structured such as: {\"processor_name: {\"argument_name\": argument_value}}\ndebug (bool, optional, defaults to False) – Whether to print debug statements\nremove_directives (bool, optional, defaults to True) – Whether to remove directives from each cell after processing\nprocess_immediately (bool, optional, defaults to False) – Whether to process the notebook after initialization\n\nProcesses notebook cells and comments in a notebook\n\n\nprocess_cell\n&lt;source&gt;\n\n(processor: callable, cell: AttributeDictionary)\n\n\nParameters:\n\nprocessor (callable) – A function to apply to a notebook cell’s content\ncell (AttributeDictionary) – A cell from a Jupyter Notebook\n\nProcesses a single cell of a notebook. Should not be called explicitly and instead a user should use process_notebook\n\n\n\nprocess_notebook\n&lt;source&gt;\n\n()\n\n\nProcesses the content of the notebook"
  },
  {
    "objectID": "getting_started.html",
    "href": "getting_started.html",
    "title": "Getting started with nbquarto",
    "section": "",
    "text": "To install the latest stable version of this package with pypi, run:\npip install nbquarto\nAlso please ensure you have Quarto installed on your machine. You can find installation instructions here.\nTo install the latest development version of this package, run:\npip install git+https://github.com/muellerzr/nbquarto"
  },
  {
    "objectID": "getting_started.html#installation",
    "href": "getting_started.html#installation",
    "title": "Getting started with nbquarto",
    "section": "",
    "text": "To install the latest stable version of this package with pypi, run:\npip install nbquarto\nAlso please ensure you have Quarto installed on your machine. You can find installation instructions here.\nTo install the latest development version of this package, run:\npip install git+https://github.com/muellerzr/nbquarto"
  },
  {
    "objectID": "getting_started.html#usage-of-existing-processors",
    "href": "getting_started.html#usage-of-existing-processors",
    "title": "Getting started with nbquarto",
    "section": "Usage of existing processors",
    "text": "Usage of existing processors\nTo use nbquarto, you must first create a config.yaml file to serve as the project configuration. This file can be placed anywhere.\nFor example, located here in the repo:\ndocumentation_source: nbs\noutput_folder: docs\nprocessors: [\n    nbquarto.processors.example:BasicProcessor,\n    nbquarto.processors.autodoc:AutoDocProcessor\n]\n\nprocessor_args:\n  AutoDocProcessor: \n      repo_owner: muellerzr\n      repo_name: nbquarto\nThis reads as follows:\n\noutput_folder: All notebooks will be saved to a (potentially new) processed_notebooks directory\nprocessors: This contains the list of processors we want to apply\n\nnbquarto.processors.example:BasicProcessor and nbquarto.processors.autodoc:AutoDocProcessor: This is the exact import for the processor to apply. Can also be relative if the package is setup for it (so it could be nbquarto.processors:AutoDocProcessor)\n\nprocessor_args: This contains a list of processor: args that should be passed all the time to a particular processor, if it takes in special configuration arguments\n\nAutoDocProcessor: This is the name of the processor that will take in arguments following it\n\nrepo_name and repo_owner: These are arguments the AutoDocProcessor accepets upon its __init__.\n\n\n\nAfter creating your config.yaml file, you can run the following command to process your notebooks:\nnbquarto process \\\n    --config_file config.yaml \\\n    --notebook_folder nbs \nThis will process all notebooks in the nbs folder, and save the processed notebooks to the docs folder as qmd files."
  },
  {
    "objectID": "getting_started.html#creating-your-own-processor",
    "href": "getting_started.html#creating-your-own-processor",
    "title": "Getting started with nbquarto",
    "section": "Creating your own processor",
    "text": "Creating your own processor\nTo create your own processor that modifies a Jupyter Notebook is exceedingly straightforward in nbquarto.\nYour processor must inherit the Processor class, and contains two important items:\n\ndirectives: list[str], a list of directives to look for in the notebook cell\nprocess: Callable[[Cell], None], a function that takes in a Cell object and modifies it\n\nBy creating your own process function, this is what will do the hard work of modifying your cell to do whatever you may want.\nThe following is a small snippet (taken from the official example processor) which simply injects the code:\n# This code has been processed!\nto the top of any cell.\nfrom nbquarto import Processor\n\nclass BasicProcessor(Processor):\n    \"\"\"\n    A basic processor that adds a comment to the top of a cell\n    \"\"\"\n\n    directives = \"process\"\n\n    def process(self, cell):\n        if any(directive in cell.directives_ for directive in self.directives):\n            cell.source = f\"# This code has been processed!\\n{cell.source}\"\nThe process function is what will get applied to the notebook cell, after checking if any directives to look for exist in the cell.\ncell objects contain two important aspects of information we can look at: - directives_: list[str], a list of directives in the cell, such as process if it were written as #| process - source: The text that exists inside the cell that you might want to modify\nTo then use it in your own framework, simply add it to your config.yaml file as shown:\ndocumentation_source: nbs\noutput_folder: docs\nprocessors: [\n    module.to.processor:BasicProcessor,\n]\nIf you want to have your Processor take in additional parameters during it’s __init__, these should be declared in the config.yaml as well under processor_args:\nclass ProcessorWithArgs(Processor):\n    \"\"\"\n    A basic processor that takes in arguments\n    \"\"\"\n\n    directives = \"process\"\n\n    def process(self, cell, arg_1, arg_2):\n        if any(directive in cell.directives_ for directive in self.directives):\n            cell.source = f\"# This code has been processed with {arg_1}, {arg_2}!\\n{cell.source}\"\ndocumentation_source: nbs\noutput_folder: docs\nprocessors: [\n    module.to.processor:ProcessorWithArgs,\n]\n\nprocessor_args:\n  ProcessorWithArgs: \n      arg_1: \"Hello\"\n      arg_2: \"World\""
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "nbquarto",
    "section": "",
    "text": "Cell: An executing module or Markdown container in a Jupyter Notebook.\nDirective: A pipe-delineated (|) comment block recognized by Quarto and nbquarto.\nProcessor: A class that tailors a cell based on its directives."
  },
  {
    "objectID": "index.html#key-terms",
    "href": "index.html#key-terms",
    "title": "nbquarto",
    "section": "",
    "text": "Cell: An executing module or Markdown container in a Jupyter Notebook.\nDirective: A pipe-delineated (|) comment block recognized by Quarto and nbquarto.\nProcessor: A class that tailors a cell based on its directives."
  },
  {
    "objectID": "index.html#introducing-nbquarto-your-python-powered-notebook-enhancer",
    "href": "index.html#introducing-nbquarto-your-python-powered-notebook-enhancer",
    "title": "nbquarto",
    "section": "Introducing nbquarto: Your Python-Powered Notebook Enhancer",
    "text": "Introducing nbquarto: Your Python-Powered Notebook Enhancer\nHarness the might of Python with nbquarto, a dynamic interface to externally transform Jupyter Notebook cells, designed ideally for Quarto projects. This framework streamlines your documentation process by enabling rapid creation and implementation of post-processors for Jupyter Notebooks. Although Quarto-focused, nbquarto serves as a valuable asset for any Python project leveraging Jupyter Notebooks."
  },
  {
    "objectID": "index.html#choose-nbquarto-for-a-superior-experience",
    "href": "index.html#choose-nbquarto-for-a-superior-experience",
    "title": "nbquarto",
    "section": "Choose nbquarto for a Superior Experience",
    "text": "Choose nbquarto for a Superior Experience\nDrawing inspiration from nbdev, nbquarto steers towards a more comprehensible and less abstracted interface. It focuses on modifications to Jupyter Notebooks as to fully capitalize on Quarto’s abundant features, minimizing dependencies, and enhancing code readability."
  },
  {
    "objectID": "index.html#no-more-learning-curve-with-nbquarto",
    "href": "index.html#no-more-learning-curve-with-nbquarto",
    "title": "nbquarto",
    "section": "No More Learning Curve with nbquarto",
    "text": "No More Learning Curve with nbquarto\nWhy learn a new language (Lua) to modify content already in Python? nbquarto emerges as the Pythonic alternative to Quarto Extensions. Offering flexibility and simplicity at the cost of a negligible increase in processing time, nbquarto empowers you to control the narrative."
  },
  {
    "objectID": "index.html#how-does-nbquarto-work",
    "href": "index.html#how-does-nbquarto-work",
    "title": "nbquarto",
    "section": "How Does nbquarto Work?",
    "text": "How Does nbquarto Work?\nAt the heart of nbquarto is a Processor. This component modifies a cell to fine-tune code formatting or swiftly craft complex Quarto syntax combinations. Each cell object encompasses two crucial elements: directives_ (a list of cell directives) and source (modifiable cell text).\nSee how easy it is to add a comment to the top of a cell’s text source:\n&gt;&gt;&gt; from nbquarto import Processor\n\n&gt;&gt;&gt; class BasicProcessor(Processor):\n...    \"A basic processor that adds a comment to the top of a cell's text source.\"\n...\n...    directives = \"process\"\n...\n...    def process(self, cell):\n...        if any(directive in cell.directives_ for directive in self.directives):\n...            cell.source = f\"# This code has been processed!\\n{cell.source}\"\nAnd in a notebook cell:\n# Input\n&gt;&gt;&gt; #| process\n... print(\"Hello, world!\")\n\n# Output\n&gt;&gt;&gt; # This code has been processed!\n... print(\"Hello, world!\")"
  },
  {
    "objectID": "index.html#simplified-configuration",
    "href": "index.html#simplified-configuration",
    "title": "nbquarto",
    "section": "Simplified Configuration",
    "text": "Simplified Configuration\nSay goodbye to confusion with nbquarto’s configuration file. This handy feature organizes processor use, notebook paths, and processor constants for a seamless user experience.\ndocumentation_source: tests\nprocessors: [\n    nbquarto.processors.example:BasicProcessor,\n    nbquarto.processors.autodoc:AutoDocProcessor\n]\n\nprocessor_args:\n  AutoDocProcessor: \n      repo_owner: muellerzr\n      repo_name: nbquarto"
  },
  {
    "objectID": "index.html#efficient-notebook-processing",
    "href": "index.html#efficient-notebook-processing",
    "title": "nbquarto",
    "section": "Efficient Notebook Processing",
    "text": "Efficient Notebook Processing\nExecute the nbquarto-process command to let the configured Processor(s) work their magic on your notebooks. All processed notebooks, saved as qmd files, land safely in your desired output folder:\nnbquarto-process \\\n--config_file tests/test_artifacts/single_processor.yaml \\\n--notebook_file tests/test_artifacts/test_example.ipynb \\\n--output_folder docs/"
  },
  {
    "objectID": "index.html#nbdev-reinvented-experience-nbquarto",
    "href": "index.html#nbdev-reinvented-experience-nbquarto",
    "title": "nbquarto",
    "section": "nbdev Reinvented: Experience nbquarto",
    "text": "nbdev Reinvented: Experience nbquarto\nTransform your understanding of nbdev with nbquarto, a user-friendly reimagining of the original project. Bask in the simplicity of an unambiguous interface for modifying Jupyter Notebooks, enjoy the luxury of minimal abstraction, relish clear error messages, and appreciate the adherence to excellent Python coding practices."
  }
]