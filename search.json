[
  {
    "objectID": "tests/test_artifacts/test_example.html",
    "href": "tests/test_artifacts/test_example.html",
    "title": "Test Notebook",
    "section": "",
    "text": "::: {.cell 0=‘p’ 1=‘r’ 2=‘o’ 3=‘c’ 4=‘e’ 5=‘s’ 6=‘s’ vscode=‘{“languageId”:“plaintext”}’}\nprint(\"A test!\")\n:::"
  },
  {
    "objectID": "package_reference/processor.html",
    "href": "package_reference/processor.html",
    "title": "The Processor",
    "section": "",
    "text": "The base class for all notebook processors\n\n\nProcessor\n&lt;source&gt;\n\n(notebook: AttributeDictionary)\n\n\nBase class for all notebook processors. Any processors should inherit this class.\nWhen writing a processor, you can override methods that modify the content of a cell with the process_cell function.\nThe class stores the entire notebook in the notebook attribute.\nWhen using a processor, simply call the class and pass in a single cell.\nExample:\nclass BasicProcessor(Processor):\n    \"A basic processor that adds a comment to the top of a cell\"\n    directive = \"process\"\n\n    def process(self, cell):\n        cell.source = f\"# This code has been processed!\\n&amp;lcub;cell.source}\"\n\n\nhas_directives\n&lt;source&gt;\n\n(cell: AttributeDictionary)\n\n\nChecks if cell contains any directives in self.directives\n\n\n\nprocess\n&lt;source&gt;\n\n(cell: AttributeDictionary)\n\n\nParameters:\n\ncell (AttributeDictionary) – A cell from a Jupyter Notebook\n\nA function to apply on a cell. Should use self.has_directives to see if the processor should be applied\nExample:\ndef process(self, cell):\n    if self.has_directives(self, cell):\n        cell.source = \"Found a directive!\"\n\n\n\nprocess_cell\n&lt;source&gt;\n\n(cell: AttributeDictionary)\n\n\nParameters:\n\ncell (AttributeDictionary) – A cell from a Jupyter Notebook\n\nApplies the processor to a cell if the cell is of the correct type and contains the correct directive\n\n\n\n\nNotebookProcessor\n&lt;source&gt;\n\n(path: str = None, processors: list = [], notebook: AttributeDictionary = None, config: dict = {}, debug: bool = False, remove_directives: bool = True, process_immediately: bool = False)\n\n\n\n\n\nprocess_cell\n&lt;source&gt;\n\n(processor: callable, cell: AttributeDictionary)\n\n\nParameters:\n\nprocessor (callable) – A function to apply to a notebook cell’s content\ncell (AttributeDictionary) – A cell from a Jupyter Notebook\n\nProcesses a single cell of a notebook. Should not be called explicitly and instead a user should use process_notebook\n\n\n\nprocess_notebook\n&lt;source&gt;\n\n()\n\n\nProcesses the content of the notebook"
  },
  {
    "objectID": "package_reference/notebook.html",
    "href": "package_reference/notebook.html",
    "title": "Notebook Utilities",
    "section": "",
    "text": "Functions to help with processing of notebooks. Most come from nbdev\n\n\nNotebookCell\n&lt;source&gt;\n\n(index: int, cell: dict)\n\n\nA cell for a Jupyter Notebook\n\n\nset_source\n&lt;source&gt;\n\n(source: list)\n\n\nParameters:\n\nsource (list) – The source of the cell as a list of strings\n\nSets the source attribute of the cell as a string and removes parsed directives\n\n\n\n\nnbquarto.notebook.dict2notebook\n&lt;source&gt;\n\n(d: dict = None, **kwargs)\n\n\nParameters:\n\nd (dict, optional, defaults to None) – A dictionary to convert\n\nConverts dictionary d to an AttributeDictionary\n\n\n\nnbquarto.notebook.read_notebook\n&lt;source&gt;\n\n(path: str)\n\n\nParameters:\n\npath (str) – The path to the Jupyter Notebook\n\nReads a Jupyter Notebook from a filepath\n\n\n\nnbquarto.notebook.write_notebook\n&lt;source&gt;\n\n(notebook: AttributeDictionary, path: str)\n\n\nParameters:\n\nnotebook (AttributeDictionary) – An object representing all the cells in a Jupyter Notebook\npath (str) – The path to the Jupyter Notebook\n\nWrites the contents of notebook to path\n\n\n\nnbquarto.notebook.new_notebook\n&lt;source&gt;\n\n(cells: list = [], metadata: dict = {}, nbformat: int = 4, nbformat_minor: int = 5)\n\n\nParameters:\n\ncells (list of NotebookCell, optional, defaults to []) – A list of cells to make up the notebook\nmetadata (dict, optional, defaults to &lcub;}) – Metadata for the notebook\nnbformat (int, optional, defaults to 4) – The nbformat of the notebook\nnbformat_minor (int, optional, defaults to 5) – The minor nbformat version of the notebook\n\nCreates a new empty notebook\n\n\n\nnbquarto.notebook.make_cell\n&lt;source&gt;\n\n(text: str, cell_type: str = ‘code’, **kwargs)\n\n\nParameters:\n\ntext (str) – The source code for the cell\ncell_type (str, optional, defaults to “code”) – The type of cell to make, must be one of “code”, “markdown”, or “raw” kwargs – Additional arguments to pass to the cell, such as metadata\n\nMakes a blank notebook cell"
  },
  {
    "objectID": "notebooks/package_reference/processor.html",
    "href": "notebooks/package_reference/processor.html",
    "title": "The Processor",
    "section": "",
    "text": "The base class for all notebook processors"
  },
  {
    "objectID": "notebooks/package_reference/notebook.html",
    "href": "notebooks/package_reference/notebook.html",
    "title": "Notebook Utilities",
    "section": "",
    "text": "Functions to help with processing of notebooks. Most come from nbdev"
  }
]